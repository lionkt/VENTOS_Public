//
// Generated file, do not edit! Created by nedtool 4.6 from Messages.msg.
//

#ifndef _VENTOS_MESSAGES_M_H_
#define _VENTOS_MESSAGES_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "modules/messages/WaveShortMessage_m.h"

#include <Coord.h>

#include <deque>
typedef std::deque<std::string> stringQueue;

#include <list>
typedef std::list<std::string> stringList;
// }}


namespace VENTOS {

/**
 * Class generated from <tt>Messages.msg:49</tt> by nedtool.
 * <pre>
 * packet BeaconVehicle extends WaveShortMessage
 * {
 *     string sender;
 *     string senderType;
 *     string recipient;
 *     Coord pos;
 *     double speed;
 *     double accel;
 *     double maxDecel;
 *     string lane;
 *     string platoonID;
 *     int platoonDepth;
 * }
 * </pre>
 */
class BeaconVehicle : public ::WaveShortMessage
{
  protected:
    opp_string sender_var;
    opp_string senderType_var;
    opp_string recipient_var;
    Coord pos_var;
    double speed_var;
    double accel_var;
    double maxDecel_var;
    opp_string lane_var;
    opp_string platoonID_var;
    int platoonDepth_var;

  private:
    void copy(const BeaconVehicle& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BeaconVehicle&);

  public:
    BeaconVehicle(const char *name=NULL, int kind=0);
    BeaconVehicle(const BeaconVehicle& other);
    virtual ~BeaconVehicle();
    BeaconVehicle& operator=(const BeaconVehicle& other);
    virtual BeaconVehicle *dup() const {return new BeaconVehicle(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
    virtual const char * getSenderType() const;
    virtual void setSenderType(const char * senderType);
    virtual const char * getRecipient() const;
    virtual void setRecipient(const char * recipient);
    virtual Coord& getPos();
    virtual const Coord& getPos() const {return const_cast<BeaconVehicle*>(this)->getPos();}
    virtual void setPos(const Coord& pos);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual double getAccel() const;
    virtual void setAccel(double accel);
    virtual double getMaxDecel() const;
    virtual void setMaxDecel(double maxDecel);
    virtual const char * getLane() const;
    virtual void setLane(const char * lane);
    virtual const char * getPlatoonID() const;
    virtual void setPlatoonID(const char * platoonID);
    virtual int getPlatoonDepth() const;
    virtual void setPlatoonDepth(int platoonDepth);
};

inline void doPacking(cCommBuffer *b, BeaconVehicle& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BeaconVehicle& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:64</tt> by nedtool.
 * <pre>
 * packet BeaconBicycle extends WaveShortMessage
 * {
 *     string sender;
 *     string senderType;
 *     string recipient;
 *     Coord pos;
 *     double speed;
 *     double accel;
 *     double maxDecel;
 *     string lane;
 *     string platoonID;
 *     int platoonDepth;
 * }
 * </pre>
 */
class BeaconBicycle : public ::WaveShortMessage
{
  protected:
    opp_string sender_var;
    opp_string senderType_var;
    opp_string recipient_var;
    Coord pos_var;
    double speed_var;
    double accel_var;
    double maxDecel_var;
    opp_string lane_var;
    opp_string platoonID_var;
    int platoonDepth_var;

  private:
    void copy(const BeaconBicycle& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BeaconBicycle&);

  public:
    BeaconBicycle(const char *name=NULL, int kind=0);
    BeaconBicycle(const BeaconBicycle& other);
    virtual ~BeaconBicycle();
    BeaconBicycle& operator=(const BeaconBicycle& other);
    virtual BeaconBicycle *dup() const {return new BeaconBicycle(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
    virtual const char * getSenderType() const;
    virtual void setSenderType(const char * senderType);
    virtual const char * getRecipient() const;
    virtual void setRecipient(const char * recipient);
    virtual Coord& getPos();
    virtual const Coord& getPos() const {return const_cast<BeaconBicycle*>(this)->getPos();}
    virtual void setPos(const Coord& pos);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual double getAccel() const;
    virtual void setAccel(double accel);
    virtual double getMaxDecel() const;
    virtual void setMaxDecel(double maxDecel);
    virtual const char * getLane() const;
    virtual void setLane(const char * lane);
    virtual const char * getPlatoonID() const;
    virtual void setPlatoonID(const char * platoonID);
    virtual int getPlatoonDepth() const;
    virtual void setPlatoonDepth(int platoonDepth);
};

inline void doPacking(cCommBuffer *b, BeaconBicycle& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BeaconBicycle& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:79</tt> by nedtool.
 * <pre>
 * packet BeaconPedestrian extends WaveShortMessage
 * {
 *     string sender;
 *     string senderType;
 *     string recipient;
 *     Coord pos;
 *     double speed;
 *     double accel;
 *     double maxDecel;
 *     string lane;
 *     string platoonID;
 *     int platoonDepth;
 * }
 * </pre>
 */
class BeaconPedestrian : public ::WaveShortMessage
{
  protected:
    opp_string sender_var;
    opp_string senderType_var;
    opp_string recipient_var;
    Coord pos_var;
    double speed_var;
    double accel_var;
    double maxDecel_var;
    opp_string lane_var;
    opp_string platoonID_var;
    int platoonDepth_var;

  private:
    void copy(const BeaconPedestrian& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BeaconPedestrian&);

  public:
    BeaconPedestrian(const char *name=NULL, int kind=0);
    BeaconPedestrian(const BeaconPedestrian& other);
    virtual ~BeaconPedestrian();
    BeaconPedestrian& operator=(const BeaconPedestrian& other);
    virtual BeaconPedestrian *dup() const {return new BeaconPedestrian(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
    virtual const char * getSenderType() const;
    virtual void setSenderType(const char * senderType);
    virtual const char * getRecipient() const;
    virtual void setRecipient(const char * recipient);
    virtual Coord& getPos();
    virtual const Coord& getPos() const {return const_cast<BeaconPedestrian*>(this)->getPos();}
    virtual void setPos(const Coord& pos);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual double getAccel() const;
    virtual void setAccel(double accel);
    virtual double getMaxDecel() const;
    virtual void setMaxDecel(double maxDecel);
    virtual const char * getLane() const;
    virtual void setLane(const char * lane);
    virtual const char * getPlatoonID() const;
    virtual void setPlatoonID(const char * platoonID);
    virtual int getPlatoonDepth() const;
    virtual void setPlatoonDepth(int platoonDepth);
};

inline void doPacking(cCommBuffer *b, BeaconPedestrian& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BeaconPedestrian& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:94</tt> by nedtool.
 * <pre>
 * packet BeaconRSU extends WaveShortMessage
 * {
 *     string sender;
 *     string senderType;
 *     string recipient;
 *     Coord pos;
 * }
 * </pre>
 */
class BeaconRSU : public ::WaveShortMessage
{
  protected:
    opp_string sender_var;
    opp_string senderType_var;
    opp_string recipient_var;
    Coord pos_var;

  private:
    void copy(const BeaconRSU& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BeaconRSU&);

  public:
    BeaconRSU(const char *name=NULL, int kind=0);
    BeaconRSU(const BeaconRSU& other);
    virtual ~BeaconRSU();
    BeaconRSU& operator=(const BeaconRSU& other);
    virtual BeaconRSU *dup() const {return new BeaconRSU(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
    virtual const char * getSenderType() const;
    virtual void setSenderType(const char * senderType);
    virtual const char * getRecipient() const;
    virtual void setRecipient(const char * recipient);
    virtual Coord& getPos();
    virtual const Coord& getPos() const {return const_cast<BeaconRSU*>(this)->getPos();}
    virtual void setPos(const Coord& pos);
};

inline void doPacking(cCommBuffer *b, BeaconRSU& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BeaconRSU& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:103</tt> by nedtool.
 * <pre>
 * packet DummyMsg extends WaveShortMessage
 * {
 *     string payload;
 * }
 * </pre>
 */
class DummyMsg : public ::WaveShortMessage
{
  protected:
    opp_string payload_var;

  private:
    void copy(const DummyMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DummyMsg&);

  public:
    DummyMsg(const char *name=NULL, int kind=0);
    DummyMsg(const DummyMsg& other);
    virtual ~DummyMsg();
    DummyMsg& operator=(const DummyMsg& other);
    virtual DummyMsg *dup() const {return new DummyMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
};

inline void doPacking(cCommBuffer *b, DummyMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DummyMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:109</tt> by nedtool.
 * <pre>
 * packet LaneChangeMsg extends WaveShortMessage
 * {
 *     string sender;
 *     string senderType;
 *     string recipient;
 *     stringQueue laneChange;
 * }
 * </pre>
 */
class LaneChangeMsg : public ::WaveShortMessage
{
  protected:
    opp_string sender_var;
    opp_string senderType_var;
    opp_string recipient_var;
    stringQueue laneChange_var;

  private:
    void copy(const LaneChangeMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LaneChangeMsg&);

  public:
    LaneChangeMsg(const char *name=NULL, int kind=0);
    LaneChangeMsg(const LaneChangeMsg& other);
    virtual ~LaneChangeMsg();
    LaneChangeMsg& operator=(const LaneChangeMsg& other);
    virtual LaneChangeMsg *dup() const {return new LaneChangeMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
    virtual const char * getSenderType() const;
    virtual void setSenderType(const char * senderType);
    virtual const char * getRecipient() const;
    virtual void setRecipient(const char * recipient);
    virtual stringQueue& getLaneChange();
    virtual const stringQueue& getLaneChange() const {return const_cast<LaneChangeMsg*>(this)->getLaneChange();}
    virtual void setLaneChange(const stringQueue& laneChange);
};

inline void doPacking(cCommBuffer *b, LaneChangeMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LaneChangeMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:118</tt> by nedtool.
 * <pre>
 * packet PlatoonMsg extends WaveShortMessage
 * {
 *     string sender;
 *     string senderType;
 *     string recipient;
 *     int type;
 *     string sendingPlatoonID;
 *     string receivingPlatoonID;
 *     double dblValue;
 *     string strValue;
 *     stringQueue queueValue;
 * }
 * </pre>
 */
class PlatoonMsg : public ::WaveShortMessage
{
  protected:
    opp_string sender_var;
    opp_string senderType_var;
    opp_string recipient_var;
    int type_var;
    opp_string sendingPlatoonID_var;
    opp_string receivingPlatoonID_var;
    double dblValue_var;
    opp_string strValue_var;
    stringQueue queueValue_var;

  private:
    void copy(const PlatoonMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlatoonMsg&);

  public:
    PlatoonMsg(const char *name=NULL, int kind=0);
    PlatoonMsg(const PlatoonMsg& other);
    virtual ~PlatoonMsg();
    PlatoonMsg& operator=(const PlatoonMsg& other);
    virtual PlatoonMsg *dup() const {return new PlatoonMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
    virtual const char * getSenderType() const;
    virtual void setSenderType(const char * senderType);
    virtual const char * getRecipient() const;
    virtual void setRecipient(const char * recipient);
    virtual int getType() const;
    virtual void setType(int type);
    virtual const char * getSendingPlatoonID() const;
    virtual void setSendingPlatoonID(const char * sendingPlatoonID);
    virtual const char * getReceivingPlatoonID() const;
    virtual void setReceivingPlatoonID(const char * receivingPlatoonID);
    virtual double getDblValue() const;
    virtual void setDblValue(double dblValue);
    virtual const char * getStrValue() const;
    virtual void setStrValue(const char * strValue);
    virtual stringQueue& getQueueValue();
    virtual const stringQueue& getQueueValue() const {return const_cast<PlatoonMsg*>(this)->getQueueValue();}
    virtual void setQueueValue(const stringQueue& queueValue);
};

inline void doPacking(cCommBuffer *b, PlatoonMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlatoonMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:132</tt> by nedtool.
 * <pre>
 * packet SystemMsg extends WaveShortMessage
 * {
 *     string sender;
 *     string recipient;
 *     int requestType;	//0 = pathing request
 *     string edge;
 *     int target;
 * }
 * </pre>
 */
class SystemMsg : public ::WaveShortMessage
{
  protected:
    opp_string sender_var;
    opp_string recipient_var;
    int requestType_var;
    opp_string edge_var;
    int target_var;

  private:
    void copy(const SystemMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SystemMsg&);

  public:
    SystemMsg(const char *name=NULL, int kind=0);
    SystemMsg(const SystemMsg& other);
    virtual ~SystemMsg();
    SystemMsg& operator=(const SystemMsg& other);
    virtual SystemMsg *dup() const {return new SystemMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
    virtual const char * getRecipient() const;
    virtual void setRecipient(const char * recipient);
    virtual int getRequestType() const;
    virtual void setRequestType(int requestType);
    virtual const char * getEdge() const;
    virtual void setEdge(const char * edge);
    virtual int getTarget() const;
    virtual void setTarget(int target);
};

inline void doPacking(cCommBuffer *b, SystemMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SystemMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Messages.msg:142</tt> by nedtool.
 * <pre>
 * packet RouterMsg extends WaveShortMessage
 * {
 *     string recipient;
 *     stringList info;
 * }
 * </pre>
 */
class RouterMsg : public ::WaveShortMessage
{
  protected:
    opp_string recipient_var;
    stringList info_var;

  private:
    void copy(const RouterMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RouterMsg&);

  public:
    RouterMsg(const char *name=NULL, int kind=0);
    RouterMsg(const RouterMsg& other);
    virtual ~RouterMsg();
    RouterMsg& operator=(const RouterMsg& other);
    virtual RouterMsg *dup() const {return new RouterMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getRecipient() const;
    virtual void setRecipient(const char * recipient);
    virtual stringList& getInfo();
    virtual const stringList& getInfo() const {return const_cast<RouterMsg*>(this)->getInfo();}
    virtual void setInfo(const stringList& info);
};

inline void doPacking(cCommBuffer *b, RouterMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RouterMsg& obj) {obj.parsimUnpack(b);}

} // namespace VENTOS

#endif // ifndef _VENTOS_MESSAGES_M_H_

